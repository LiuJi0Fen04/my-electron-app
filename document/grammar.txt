1. ARRAY METHODS play a crucial role in JavaScript development, enabling efficient data manipulation, filtering, transformation, and iteration. 
    Here are some of the most commonly used array methods:

    1. Iteration Methods
        forEach() – Executes a provided function once for each array element.
        [1, 2, 3].forEach(num => console.log(num));

        map() – Creates a new array by applying a function to each element.
        const doubled = [1, 2, 3].map(num => num * 2);
        console.log(doubled); // [2, 4, 6]

    2. Filtering & Searching
        filter() – Returns a new array with elements that match a condition.
        const evens = [1, 2, 3, 4].filter(num => num % 2 === 0);
        console.log(evens); // [2, 4]

        find() – Returns the first matching element.
        const nums = [10, 20, 30];
        const found = nums.find(num => num > 15);
        console.log(found); // 20

        includes() – Checks if an array contains a specific value.
        console.log([1, 2, 3].includes(2)); // true

    3. Sorting & Reversing
        sort() – Sorts the array in place.
        const arr = [3, 1, 4];
        arr.sort((a, b) => a - b);
        console.log(arr); // [1, 3, 4]

        reverse() – Reverses the order of elements.
        const nums = [1, 2, 3];
        nums.reverse();
        console.log(nums); // [3, 2, 1]

    4. Reduction & Aggregation
        reduce() – Applies a function to accumulate values.
        const sum = [1, 2, 3].reduce((total, num) => total + num, 0);
        console.log(sum); // 6

        some() – Checks if at least one element meets the condition.
        console.log([1, 2, 3].some(num => num > 2)); // true

        every() – Checks if all elements meet the condition.
        console.log([1, 2, 3].every(num => num > 0)); // true

    5. Modern Enhancements (ES2023+)
        findLast() – Returns the last matching element instead of the first.

        toSorted() – Creates a sorted copy without modifying the original array.

2. intersectionObserver:
    IntersectionObserver is a JavaScript API designed to efficiently track when an element enters or exits the viewport or another specified container. 
    It’s not part of the DOM itself, but it interacts with DOM elements by observing their visibility changes.Traditionally, developers used event 
    listeners like scroll or resize combined with getBoundingClientRect() to detect visibility, but these methods could be performance-heavy. 
    IntersectionObserver simplifies this by running asynchronously and off the main thread, making it ideal for tasks like lazy loading images, 
    infinite scrolling, and triggering animations2.

    1. observer.observe(thumb)
    Here, thumb is a single <img> element (a thumbnail).
    When you call observer.observe(thumb), you are telling the IntersectionObserver to start watching this specific element.
    You can call observe() multiple times for different elements; the observer keeps track of all of them.
    2. How does the callback get entries?
    The IntersectionObserver is always watching all the elements you told it to observe.
    Whenever any of those elements crosses the intersection boundary (e.g., becomes visible or invisible in the container), the observer’s callback is triggered.
    The callback receives an array called entries.
    Each item in entries is an IntersectionObserverEntry object, representing one element that has just changed its intersection status.
    3. How is thumb related to entries?
    When a particular thumb (image element) becomes visible, the observer creates an IntersectionObserverEntry for it.
    Inside the callback, entry.target refers to the exact element (the thumb) that triggered the event.
    So, even though you observe each thumb individually, the callback can be triggered for one or more elements at a time, and each is represented as an entry in the entries array.
    4. Example Flow
    Let’s say you have 10 thumbnails and you call observer.observe(thumb) for each one.
    At first, maybe only the first 2 are visible. When the page loads, the callback is called with entries for those 2.
    As you scroll, maybe 3 more become visible. The callback is called again, this time with 3 entries.
    Each entry.target is the specific <img> element (the thumb) that just became visible.
    5. Visual Analogy
    Think of the observer as a security camera watching several doors (thumbnails).
    You tell the camera to watch each door (observer.observe(thumb)).
    Whenever any door opens (becomes visible), the camera notifies you with a list (entries) of which doors just opened.
    Each notification (entry) tells you exactly which door (entry.target) it was.


            
3. Here’s a breakdown of the problem and how the IIFE solves it:

    The Problem: Global Scope Pollution
        Dynamic Content Loading: Your application doesn't navigate to entirely new pages in the traditional sense. Instead, the renderer.js file dynamically loads the content of HTML files like config.html into the main content area of index.html. When it does this, it also finds any associated <script> tags and adds them to the document to make them run.

        Variable Declaration in Global Scope: As your own code comment in config.js notes, an early version of the script had a critical flaw.

        When you first clicked "算法配置编辑", config.js was loaded. It created a constant variable named clickableAreas in the global scope.
        If you navigated away and then clicked "算法配置编辑" a second time, the loadMainContent function would attempt to load and run config.js again.
        The script would then try to declare const clickableAreas in the global scope again.
        The Error: JavaScript does not allow you to re-declare a variable using const or let within the same scope. This would throw a SyntaxError: Identifier 'clickableAreas' has already been declared, and your script would fail to run on the second click.

    The Solution: The IIFE
        The (() => { ... })() syntax creates a private, temporary scope for your code.

        Here's how it works:

        () => { ... }: This is an anonymous arrow function. It has no name.
        (...): The parentheses wrapping the function (() => { ... }) are crucial. They tell JavaScript to treat the function as an expression rather than a standard declaration.
        (): The final pair of parentheses () at the end immediately executes, or "invokes," the function expression.
        By wrapping the code this way, you gain the following benefits:

        Creates a Private Scope: Every time config.js is loaded, the IIFE creates a brand new, isolated function scope.
        Avoids Conflicts: Variables like clickableAreas are now declared inside this private scope, not the global one. When the function finishes, this scope and its variables are discarded.
        Enables Reusability: When you load the script a second time, a new private scope is created for the new execution. Since the new variables are in a completely separate scope, they don't conflict with any from the previous execution.
    In short, the IIFE acts as a self-contained wrapper, ensuring that your script runs cleanly every time it's loaded without polluting the global scope or causing re-declaration errors.

4. Bonus Tip: Dynamic Object Expansion
    In JavaScript, arrays and objects are super flexible. You can start with an empty array, and start assigning complex objects to arbitrary indices, like:

    javascript
    myArray[3] = { data: "hi", more: [] };