1. my_protocal:// ‚Üê contains underscore (not compliant with URI standard)




2. üß† What is useCapture?
    In the DOM, events go through three phases:
        1.Capture phase ‚Äì from the outermost parent down to the target
        2.Target phase ‚Äì the event hits the actual target element
        3.Bubble phase ‚Äì event bubbles back up to the parent elements
    By default, addEventListener listens in the bubble phase (step 3).
    If you pass true as the 3rd argument, you switch to capture phase (step 1).


    ‚úÖ Example: useCapture = true vs false
        üßæ HTML
            <div id="outer" style="padding: 20px; background: lightblue;">
            Outer Div
            <div id="inner" style="padding: 20px; background: lightgreen;">
                Inner Div
            </div>
            </div>
            
        üß† JavaScript:
            js

            const outer = document.getElementById('outer');
            const inner = document.getElementById('inner');

            outer.addEventListener('click', () => {
            console.log('Outer DIV - capture phase');
            }, true); // <-- useCapture = true

            outer.addEventListener('click', () => {
            console.log('Outer DIV - bubble phase');
            }, false); // <-- useCapture = false (default)

            inner.addEventListener('click', () => {
            console.log('Inner DIV clicked');
            });

        ‚ñ∂Ô∏è What Happens When You Click the Inner Div?
            1. Capture Phase (Top ‚Üí Bottom):
                Outer DIV - capture phase ‚Üí ‚úÖ This fires first
            2. Target Phase:
                Inner DIV clicked
            3. Bubble Phase (Bottom ‚Üí Top):
                Outer DIV - bubble phase ‚Üí ‚úÖ This fires last

    üß™ Console Output:
        bash
            Outer DIV - capture phase
            Inner DIV clicked
            Outer DIV - bubble phase

    üîç Why use useCapture?
    Use it when:
        You want to intercept events early, before children handle them
        You're building complex UI where bubbling might cause bugs
        You need priority handling of user interactions

3. ondragstart
    ondragstart is a built-in event handler property in the DOM (Document Object Model). It's part of the HTML Drag 
    and Drop API and is triggered when the user starts dragging an element.


4. basic page element 
    | Tag            | Purpose                              |
    | -------------- | ------------------------------------ |
    | `<div>`        | Container block                      |
    | `<p>`          | Paragraph text                       |
    | `<span>`       | Inline container                     |Used to style or manipulate small bits of content (like label text or icon wrappers). Doesn‚Äôt add layout by default‚Äîjust semantics and style.
    | `<ul>`         | Unordered list                       |
    | `<li>`         | List item                            |Always used within a <ul> (unordered list) or <ol> (ordered list). Helps structure navigation or group items
    | `<h2>`         | Heading (medium size)                |
    | `<input>`      | User input field                     |
    | `<label>`      | Label for form input                 |
    | `<meta>`       | Metadata info (not visible)          |
    | `<link>`       | Link to CSS file                     |
    | `<script>`     | Link to JS file (commented out here) |
    | `<!DOCTYPE>`   | HTML5 declaration                    |
    | `<!-- ... -->` | Comment                              |
    | `<svg>`        | Scalable Vector Graphics             |Used to draw resolution-independent graphics (like icons) directly in HTML. Great for offline apps since you‚Äôre no longer depending on libraries like Font Awesome.
    | `<path>`       | Only used inside SVG                 |
    | `<a>`          | The classic anchor element           | It creates hyperlinks, but you can also use it for clickable UI items by styling it or intercepting the default behavior with JavaScript (like you do in your panel).
    | `<aside>`      |Typically used for complementary content| (like a sidebar). In your UI, it‚Äôs perfect for that collapsible icon panel.
    | `<nav>`        | Stands for navigation                |It wraps blocks of primary navigation links (e.g. a side panel‚Äôs menu). Helps with accessibility and SEO.


| HTML Element | `createElement(...)` must use |
| ------------ | ----------------------------- |
| `<div>`      | `'div'`                       |
| `<p>`        | `'p'`                         |
| `<button>`   | `'button'`                    |
| `<img>`      | `'img'`                       |
| `<input>`    | `'input'`                     |
